package Matrix;

public abstract class GenericMatrix<E extends Number> {
    //abstract 修饰 说明必须要被重写 和接口类一样
    protected abstract E add(E o1, E o2);

    protected abstract E multiply(E o1, E o2);

    protected abstract E zero();


    //公用的函数 不需要被改写
    //加法
    E[][] addMatrix(E[][] matrix1, E[][] matrix2) {

        if (matrix1.length != matrix2.length
                || matrix1[0].length != matrix2[0].length) {
            throw new RuntimeException("The matrices do not have the save size");
        }
        //新建矩阵 用来存放结果
        E[][] result = (E[][]) new Number[matrix1.length][matrix1[0].length];
        for (int i = 0; i < matrix1.length; i++) {
            for (int j = 0; j < matrix1[i].length; j++) {
                result[i][j] = add(matrix1[i][j], matrix2[i][j]);
                //在这里有调用到不同方法 根据不同的数据类型 调用不同类当中的方法
            }
        }
        return result;
    }


    //乘法
    E[][] multiplyMatrix(E[][] matrix1, E[][] matrix2) {

        if (matrix1[0].length != matrix2.length) {
            throw new RuntimeException(
                    "The matrices do not have compatible size");
        }
        //新建一个矩阵 用来存放矩阵乘积的结果
        E[][] result = (E[][]) new Number[matrix1.length][matrix2[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                result[i][j] = zero();
                for (int k = 0; k < matrix1[i].length; k++) {
                    result[i][j] = add(result[i][j],
                            multiply(matrix1[i][k], matrix2[k][j]));
                }
            }
        }
        return result;
    }

    //输出矩阵和结果
    static void printResult(Number[][] m1, Number[][] m2, Number[][] m3,
                                   char op) {
        //op 代表的是运算法则
        for (int i = 0; i < m1.length; i++) {
            for (int j = 0; j < m1[0].length; j++) {
                System.out.print(" " + m1[i][j]);
            }
            if (i == m1.length / 2) {
                System.out.print(" " + op + " ");
            }
            else {
                System.out.print(" ");
            }

            for (int j = 0; j < m2.length; j++) {
                System.out.print(" " + m2[i][j]);
            }
            if (i == m1.length / 2) {
                System.out.print(" = ");
            }
            else {
                System.out.print(" ");
            }
            for (int j = 0; j < m3.length; j++) {
                System.out.print(m3[i][j] + " ");
            }
            System.out.println();
        }
    }
}
